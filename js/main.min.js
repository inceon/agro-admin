(function () {
    angular
        .module('app', [
            'ui.bootstrap',
            'ui.router',
            'ngStorage',
            'ngSanitize',
            'ngCookies',
            'ngAnimate',
            'ngFileUpload',
            'ngAria',
            'toastr'
        ])
        .constant('back4app', {
            appId: 'fPfi2t7V7TqDfJzdUpa220ZsiWbx7FGJbgoR6Mdz',
            token: 'smwDVqORGP1zeMPeLzlfjOP61dWbbQmK4fPER6HA'
        });
}());

(function () {
    'use strict';

    angular
        .module('app')
        .config(['$stateProvider', '$urlRouterProvider', '$httpProvider', config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/');
        delete $httpProvider.defaults.headers.common['X-Requested-With'];

        // Application routes
        $stateProvider
            .state('login', {
                url: '/login',
                templateUrl: 'templates/login.html',
                controller: 'LoginCtrl',
                controllerAs: 'vm'
            })
            .state('app', {
                templateUrl: 'templates/left_menu.html',
                controller: 'LeftMenuCtrl',
                controllerAs: 'vm',
                abstract: true
            })
            .state('app.upload', {
                url: '/upload',
                templateUrl: 'templates/upload.html',
                controller: 'UploadCtrl',
                controllerAs: 'vm'
            })
            .state('app.users', {
                url: '/users',
                templateUrl: 'templates/users.html',
                controller: 'UsersCtrl',
                controllerAs: 'vm'
            })
            .state('app.news', {
                url: '/news',
                templateUrl: 'templates/news.html',
                controller: 'NewsCtrl',
                controllerAs: 'vm'
            })
            .state('app.categories', {
                url: '/categories',
                templateUrl: 'templates/categories.html',
                controller: 'CategoriesCtrl',
                controllerAs: 'vm'
            })
            .state('app.suggestion', {
                url: '/suggestion',
                templateUrl: 'templates/suggestion.html',
                controller: 'SuggestionCtrl',
                controllerAs: 'vm'
            })
            .state('app.services', {
                url: '/services',
                templateUrl: 'templates/services.html',
                controller: 'ServicesCtrl',
                controllerAs: 'vm'
            })
            .state('app.offers', {
                url: '/offers',
                templateUrl: 'templates/offers.html',
                controller: 'OffersCtrl',
                controllerAs: 'vm'
            });
    }
}());

(function () {
    'use strict';

    angular
        .module('app')
        .run(['$state', run]);

    function run($state) {
        $state.go('login');
    }
}());

(function () {
    angular
        .module('app')
        .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

    function AlertsCtrl($scope) {
        $scope.alerts = [{
            type: 'success',
            msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
        }, {
            type: 'danger',
            msg: 'Found a bug? Create an issue with as many details as you can.'
        }];

        $scope.addAlert = function () {
            $scope.alerts.push({
                msg: 'Another alert!'
            });
        };

        $scope.closeAlert = function (index) {
            $scope.alerts.splice(index, 1);
        };
    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('CategoriesCtrl', ['$scope', 'app', CategoriesCtrl]);

    function CategoriesCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Категории');
        var vm = this;
        vm.addCategory = addCategory;
        vm.addSubCategory = addSubCategory;
        vm.updateList = updateList;
        vm.saveInfo = saveInfo;
        vm.deleteCategory = deleteCategory;
        vm.deleteSubCategory = deleteSubCategory;

        vm.newCategory = {
            name: '',
            edit: true,
            subcategories: []
        };

        vm.newSubCategory = {
            name: '',
            category: '',
            edit: true
        };

        updateList();

        function addCategory() {
            vm.categories.push(vm.newCategory);
        }

        function addSubCategory(category) {
            vm.newSubCategory.category = category.objectId;
            category.subcategories.push(vm.newSubCategory);
        }

        function updateList() {
            app.getCategories()
                .then(function (res) {
                    vm.categories = res;
                    angular.forEach(vm.categories, function (category) {
                        app.getSubCategories(category.objectId)
                            .then(function (res) {
                                category.subcategories = res;
                            })
                    })
                });
        }

        function saveInfo(type, item) {
            if (type == 'category') {
                if (item.objectId) {
                    app.saveCategoryInfo(item)
                        .then(function () {
                            updateList();
                        });
                } else {
                    app.addCategory(item)
                        .then(function () {
                            updateList();
                        });
                }
            } else {
                if (item.objectId) {
                    app.saveSubCategoryInfo(item)
                        .then(function () {
                            updateList();
                        });
                } else {
                    app.addSubCategory(item)
                        .then(function () {
                            updateList();
                        });
                }
            }
            item.edit = false;
        }

        function deleteCategory(category) {
            if (confirm("Удалить эту запись?")) {
                app.deleteCategory(category)
                    .then(function () {
                        updateList();
                    });
            }
        }

        function deleteSubCategory(subcategory) {
            if (confirm("Удалить эту запись?")) {
                app.deleteSubCategory(subcategory)
                    .then(function () {
                        updateList();
                    });
            }
        }

    }
}());

(function () {
    angular.module('app')
        .controller('LeftMenuCtrl', ['$scope', '$cookieStore', '$state', 'user', LeftMenuCtrl]);

    function LeftMenuCtrl($scope, $cookieStore, $state, user) {

        var vm = this;

        vm.title = 'Админка';
        vm.logout = logout;

        function logout() {
            user.logout()
                .then(function () {
                    $state.go('login');
                });
        }

        var mobileView = 992;

        $scope.getWidth = function () {
            return window.innerWidth;
        };

        $scope.$watch($scope.getWidth, function (newValue, oldValue) {
            if (newValue >= mobileView) {
                if (angular.isDefined($cookieStore.get('toggle'))) {
                    $scope.toggle = !$cookieStore.get('toggle') ? false : true;
                } else {
                    $scope.toggle = true;
                }
            } else {
                $scope.toggle = false;
            }

        });

        $scope.toggleSidebar = function () {
            $scope.toggle = !$scope.toggle;
            $cookieStore.put('toggle', $scope.toggle);
        };

        window.onresize = function () {
            $scope.$apply();
        };

        $scope.$on('changeTitle', function (event, data) {
            vm.title = data;
        })
    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('LoginCtrl', ['$scope', '$state', 'user', 'toastr', LoginCtrl]);

    function LoginCtrl($scope, $state, user, toastr) {

        var vm = this;
        vm.login = login;

        vm.data = {
            email: '',
            password: ''
        };

        function login() {
            if (vm.data.email.length < 4) {
                toastr.error('Please enter an email address.');
                return;
            }
            if (vm.data.password.length < 4) {
                toastr.error('Please enter a password.');
                return;
            }

            if (user.login(vm.data)) {
                $state.go('app.users');
            }
            // firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {
            //     var errorCode = error.code;
            //     var errorMessage = error.message;
            //     toastr.error(errorMessage);
            // });
        }

        // $state.go('app.users');
    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('NewsCtrl', ['$scope', 'app', NewsCtrl]);

    function NewsCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Новости');
        var vm = this;


        vm.newNewsData = {
            photo: '',
            title: '',
            text: '',
            edit: true
        };
        vm.saveInfo = saveInfo;
        vm.deleteNews = deleteNews;
        vm.addNews = addNews;
        updateList();

        function updateList() {
            app.getNews()
                .then(function (res) {
                    vm.news = res;
                });
        }

        function saveInfo(news) {
            app.uploadFile(vm.data.file)
                .then(function (res) {
                    news.photo = res.url;
                    if (news.objectId) {
                        app.saveNewsInfo(news)
                            .then(function () {
                                updateList();
                            });
                    } else {
                        app.addNews(news)
                            .then(function () {
                                updateList();
                            });
                    }
                });
            news.edit = false;
        }

        function deleteNews(news) {
            if (confirm("Удалить эту запись?")) {
                app.deleteNews(news)
                    .then(function () {
                        updateList();
                    });
            }
        }

        function addNews() {
            vm.news.push(vm.newNewsData);
        }
    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('OffersCtrl', ['$scope', 'app', OffersCtrl]);

    function OffersCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Заявки');
        var vm = this;

        vm.deleteOffer = deleteOffer;
        updateList();

        function updateList() {
            app.getOffers()
                .then(function (res) {
                    vm.offers = res;
                    angular.forEach(vm.offers, function (item) {
                        if (item.type === 'buy') {
                            item.type = 'Купить';
                        } else {
                            item.type = 'Продать';
                        }

                        app.getComments(item.objectId)
                            .then(function (res) {
                                item.comments = res;
                            });

                        app.getFiles(item.objectId)
                            .then(function (res) {
                                item.files = res;
                            });

                        app.getUser(item.user)
                            .then(function (res) {
                                item.user = res[0];
                            });

                        app.getCategory(item.category)
                            .then(function (res) {
                                item.category = res[0].name;
                            });

                        app.getSubCategory(item.subcategory)
                            .then(function (res) {
                                item.subcategory = res[0].name;
                            });
                    })
                })
                .then(function () {
                    console.log(vm.offers);
                });
        }

        function deleteOffer(offer) {
            if (confirm("Удалить эту запись?")) {
                app.deleteOffer(offer)
                    .then(function () {
                        updateList();
                    });
            }
        }

    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('ServicesCtrl', ['$scope', 'app', ServicesCtrl]);

    function ServicesCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Сервисы');
        var vm = this;

        vm.saveInfo = saveInfo;
        vm.deleteService = deleteService;
        vm.deleteComment = deleteComment;
        updateList();

        function updateList() {
            app.getServices()
                .then(function (res) {
                    vm.services = res;
                    angular.forEach(vm.services, function (item) {
                        app.getComments(item.objectId)
                            .then(function (res) {
                                item.comments = res;
                            });
                    });
                });
        }

        function saveInfo(service) {
            if (service.objectId) {
                app.saveServiceInfo(service)
                    .then(function () {
                        updateList();
                    });
            } else {
                app.addService(service)
                    .then(function () {
                        updateList();
                    });
            }
            service.edit = false;
        }

        function deleteService(service) {
            if (confirm("Удалить эту запись?")) {
                app.deleteService(service)
                    .then(function () {
                        updateList();
                    });
            }
        }

        function deleteComment(comment) {
            if (confirm("Удалить этот комментарий?")) {
                app.deleteComment(comment)
                    .then(function () {
                        updateList();
                    });
            }
        }
    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('SuggestionCtrl', ['$scope', 'app', SuggestionCtrl]);

    function SuggestionCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Предложения');
        var vm = this;

        vm.deleteSuggestion = deleteSuggestion;
        updateList();

        function updateList() {
            app.getSuggestion()
                .then(function (res) {
                    vm.suggestion = res;
                    angular.forEach(vm.suggestion, function (item) {
                        app.getUser(item.user.objectId)
                            .then(function (res) {
                                item.user = res[0];
                            });
                    })
                });
        }

        function deleteSuggestion(suggestion) {
            if (confirm("Удалить эту запись?")) {
                app.deleteSuggestion(suggestion)
                    .then(function () {
                        updateList();
                    });
            }
        }

    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('UploadCtrl', ['$scope', 'app', UploadCtrl]);

    function UploadCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Загрузка файлов');
        var vm = this;

        vm.upload = upload;
        vm.data = {
            file: null
        };
        vm.link = null;

        function upload() {
            app.uploadFile(vm.data.file)
                .then(function (res) {
                    console.log(res);
                    vm.link = res.url;
                });
        }

    }
}());

(function () {
    'use strict';

    angular.module('app')
        .controller('UsersCtrl', ['$scope', 'app', UsersCtrl]);

    function UsersCtrl($scope, app) {

        $scope.$emit('changeTitle', 'Пользователи');
        var vm = this;

        vm.users = app.getUsers();
        vm.newUserData = {
            id: -1,
            photo: '',
            name: '',
            surname: '',
            phone: '',
            admin: false,
            edit: true
        };
        vm.saveInfo = saveInfo;
        vm.deleteUser = deleteUser;
        vm.addUser = addUser;

        function saveInfo(user) {
            if (user.id !== -1) {
                app.saveUserInfo(user);
            } else {
                app.addUser(user);
            }
            user.edit = false;
            vm.users = app.getUsers();
        }

        function deleteUser(user) {
            app.deleteUser(user);
            vm.users = vm.users.filter(function (item) {
                return item.id != user.id;
            })
        }

        function addUser() {
            vm.users.unshift(vm.newUserData);
        }
    }
}());

/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('app')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('app')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '=?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('app')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('app')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('app')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
(function () {
    'use strict';
    angular
        .module('app')
        .factory('http', ['$http', '$sessionStorage', '$q', 'back4app', 'toastr', 'Upload', http]);

    function http($http, $sessionStorage, $q, back4app, toastr, Upload) {

        return {
            get: function (url, data) {
                return request('GET', url, data);
            },
            post: function (url, data) {
                return request('POST', url, data);
            },
            put: function (url, data) {
                return request('PUT', url, data);
            },
            delete: function (url, data) {
                return request('DELETE', url, data);
            },
            file: function (url, data) {
                return requestFile(url, data);
            }
        };


        /**
         * Main request function
         * @param {string} method - Method name
         * @param {string} url - Request url
         * @param {object} data - Data to request
         * @returns {promise}
         */
        function request(method, url, data) {

            var config = {
                dataType: 'json',
                method: method,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json; charset=UTF-8',
                    'X-Parse-Application-Id': back4app.appId,
                    'X-Parse-REST-API-Key': back4app.token
                }
            };

            if (method === 'GET') {
                config.params = data;
                config.timeout = 20000;
            }
            else {
                if (method === 'PUT') {
                    delete data.updatedAt;
                    delete data.createdAt;
                    delete data.objectId;
                }
                if (method === 'PUT' || method === 'POST') {
                    if (data.edit) delete data.edit;
                    if (data.open) delete data.open;
                    if (data.id) delete data.id;
                }

                config.data = data;
            }

            if ($sessionStorage.auth_key) {
                config.url = url + '?auth_key=' + $sessionStorage.auth_key;
            }
            else {
                config.url = url;
            }

            return $http(config)
                .then(requestComplete)
                .catch(requestFailed);
        }

        /**
         * Callback function for failed request
         * @param err
         * @returns {promise}
         */
        function requestFailed(err) {
            console.info('error', err.config.url, err);

            if (err.data == null || !err.data.error) {
                if (err.status === 200) {
                    toastr.error('Server error: ' + err.data);
                }
                else if (err.status === -1) {
                    toastr.error('Server is not available');
                }
                else if (err.status === 0) {
                    toastr.error('There is no Internet connection');
                }
                else if (err.status === 500) {
                    toastr.error('Server error: ' + err.status + ' ' + err.data.message);
                }
                else {
                    toastr.error('Server error: ' + err.status + ' ' + err.statusText);
                }
                // console.log('XHR Failed: ' + err.status);
            } else {
                toastr.error(err.data.error);
            }

            return $q.reject(err.data.error);
        }

        /**
         * Callback function for success request
         * @param response
         * @returns {promise}
         */
        function requestComplete(response) {
            var promise = $q.defer();

            console.info('response complete', response.config.url, response);

            if (!response.data.error) {
                promise.resolve(response.data);
            }
            else {
                promise.reject(response);
            }

            return promise.promise;
        }

        /**
         * Function for sending files
         * @param {string} url - Request url
         * @param {object} data - Data to request
         * @returns {promise}
         */
        function requestFile(url, file) {
            return Upload.http({
                url: url,
                headers: {
                    'Content-Type': file.type,
                    'X-Parse-Application-Id': back4app.appId,
                    'X-Parse-REST-API-Key': back4app.token
                },
                data: file
            });
        }
    }
}());

(function () {
    angular
        .module('app')
        .service('app', ['$q', 'http', 'toastr', function ($q, http, toastr) {
            var vm = this;

            var users = [
                {
                    id: 1,
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    name: 'Test',
                    surname: 'Tititii',
                    phone: '+380956666666',
                    admin: false
                },
                {
                    id: 2,
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    name: 'Test',
                    surname: 'Tititii',
                    phone: '+380956666666',
                    admin: false
                },
                {
                    id: 3,
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    name: 'Test',
                    surname: 'Tititii',
                    phone: '+380956666666',
                    admin: true
                },
                {
                    id: 4,
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    name: 'Test',
                    surname: 'Tititii',
                    phone: '+380956666666',
                    admin: true
                },
                {
                    id: 5,
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    name: 'Test',
                    surname: 'Tititii',
                    phone: '+380956666666',
                    admin: false
                },
            ];
            var news = [
                {
                    id: 1,
                    time: new Date(),
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    title: 'Lorem ipsum dolor sit amet',
                    text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium aliquam blanditiis enim est quam quas rerum sequi suscipit voluptate?',
                },
                {
                    id: 2,
                    time: new Date(),
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    title: 'Lorem ipsum dolor sit amet',
                    text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium aliquam blanditiis enim est quam quas rerum sequi suscipit voluptate?',
                },
                {
                    id: 3,
                    time: new Date(),
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    title: 'Lorem ipsum dolor sit amet',
                    text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium aliquam blanditiis enim est quam quas rerum sequi suscipit voluptate?',
                },
                {
                    id: 4,
                    time: new Date(),
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    title: 'Lorem ipsum dolor sit amet',
                    text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium aliquam blanditiis enim est quam quas rerum sequi suscipit voluptate?',
                },
                {
                    id: 5,
                    time: new Date(),
                    photo: 'https://i10.fotocdn.net/s21/19/public_pin_l/57/2526689298.jpg',
                    title: 'Lorem ipsum dolor sit amet',
                    text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium aliquam blanditiis enim est quam quas rerum sequi suscipit voluptate?',
                },
            ];
            var url = 'https://parseapi.back4app.com/classes/';
            var fileUrl = 'https://parseapi.back4app.com/files/';

            vm.getUsers = getUsers;
            vm.getUser = getUser;
            vm.saveUserInfo = saveUserInfo;
            vm.deleteUser = deleteUser;
            vm.addUser = addUser;

            vm.getNews = getNews;
            vm.saveNewsInfo = saveNewsInfo;
            vm.deleteNews = deleteNews;
            vm.addNews = addNews;

            vm.getCategories = getCategories;
            vm.getCategory = getCategory;
            vm.saveCategoryInfo = saveCategoryInfo;
            vm.deleteCategory = deleteCategory;
            vm.addCategory = addCategory;

            vm.getSubCategories = getSubCategories;
            vm.getSubCategory = getSubCategory;
            vm.saveSubCategoryInfo = saveSubCategoryInfo;
            vm.deleteSubCategory = deleteSubCategory;
            vm.addSubCategory = addSubCategory;

            vm.getSuggestion = getSuggestion;
            vm.deleteSuggestion = deleteSuggestion;

            vm.getServices = getServices;
            vm.saveServiceInfo = saveServiceInfo;
            vm.deleteService = deleteService;
            vm.addService = addService;

            vm.getComments = getComments;
            vm.deleteComment = deleteComment;

            vm.uploadFile = uploadFile;
            vm.addFile = addFile;
            vm.getFiles = getFiles;

            vm.getOffers = getOffers;
            vm.deleteOffer = deleteOffer;

            function getUsers() {
                return users;
            }

            function getUser(userId) {
                return http
                    .get(url + '_User', {
                        where: {
                            "objectId": userId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param user data
             */
            function saveUserInfo(user) {
                users.forEach(function (item) {
                    if (item.id == user.id) {
                        item = user;
                    }
                })
            }

            function deleteUser(user) {
                users = users.filter(function (item) {
                    return item.id != user.id;
                })
            }

            /**
             *
             * @param {{Object}} data - user data
             * @param {{string}} data.name - user name
             * @param {{string}} data.surname - user surname
             * @param {{phone}} data.phone - user phone
             * @param {{boolean}} data.access - user access (true - admin, false - user)
             */
            function addUser(data) {
                var maxId = 0;
                users.forEach(function (item) {
                    maxId = Math.max(maxId, item.id);
                });

                data.id = maxId + 1;
                users.push(data);
            }

            ///////////////////////////////////////////////////////

            function getNews() {
                return http
                    .get(url + 'News')
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param news data
             */
            function saveNewsInfo(news) {
                return http
                    .put(url + 'News/' + news.objectId, news)
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteNews(news) {
                return http
                    .delete(url + 'News/' + news.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param {{Object}} data - news data
             * @param {{image}} data.photo - photo news
             * @param {{string}} data.title - news title
             * @param {{string}} data.text - news text
             */
            function addNews(data) {
                return http
                    .post(url + 'News', data)
                    .then(function (res) {
                        return res.results;
                    });
            }

            ///////////////////////////////////////////////////////

            function getCategories() {
                return http
                    .get(url + 'Categories')
                    .then(function (res) {
                        return res.results;
                    });
            }

            function getCategory(categoryId) {
                return http
                    .get(url + 'Categories', {
                        where: {
                            "objectId": categoryId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param category data
             */
            function saveCategoryInfo(category) {
                return http
                    .put(url + 'Categories/' + category.objectId, category)
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteCategory(category) {
                return http
                    .delete(url + 'Categories/' + category.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param {{Object}} data - category data
             * @param {{image}} data.name - name category
             */
            function addCategory(data) {
                return http
                    .post(url + 'Categories', data)
                    .then(function (res) {
                        return res.results;
                    });
            }

            ///////////////////////////////////////////////////////

            function getSubCategories(categoryId) {
                return http
                    .get(url + 'Subcategories', {
                        where: {
                            "category": categoryId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            function getSubCategory(subcategoryId) {
                return http
                    .get(url + 'Subcategories', {
                        where: {
                            "objectId": subcategoryId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param category data
             */
            function saveSubCategoryInfo(subcategory) {
                return http
                    .put(url + 'Subcategories/' + subcategory.objectId, subcategory)
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteSubCategory(subcategory) {
                return http
                    .delete(url + 'Subcategories/' + subcategory.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param {{Object}} data - category data
             * @param {{image}} data.name - name category
             */
            function addSubCategory(data) {
                return http
                    .post(url + 'Subcategories', data)
                    .then(function (res) {
                        return res.results;
                    });
            }

            ///////////////////////////////////////////////////////

            function getSuggestion() {
                return http
                    .get(url + 'Suggestion')
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteSuggestion(suggestion) {
                return http
                    .delete(url + 'Suggestion/' + suggestion.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            ///////////////////////////////////////////////////////

            function getServices() {
                return http
                    .get(url + 'Services')
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param news data
             */
            function saveServiceInfo(news) {
                return http
                    .put(url + 'Services/' + news.objectId, news)
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteService(news) {
                return http
                    .delete(url + 'Services/' + news.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            /**
             *
             * @param {{Object}} data - service data
             * @param {{image}} data.photo - photo service
             * @param {{string}} data.text - service text
             * @param {{string}} data.location - service location
             */
            function addService(data) {
                return http
                    .post(url + 'Services', data)
                    .then(function (res) {
                        return res.results;
                    });
            }

            //////////////////////////////////////////////

            function getComments(sourceId) {
                return http
                    .get(url + 'Comments', {
                        where: {
                            "source": sourceId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteComment(comment) {
                return http
                    .delete(url + 'Comments/' + comment.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

            //////////////////////////////////////////////

            function uploadFile(file) {
                return http
                    .file(fileUrl + file.name, file)
                    .then(function (res) {
                        return res.data;
                    })
            }

            /**
             *
             * @param {object} data
             * @param {string} data.url - url to file
             * @param {string} data.source - source file
             */
            function addFile(data) {
                return http
                    .post(url + 'Files', data)
                    .then(function (res) {
                        return res.results;
                    });
            }

            function getFiles(sourceId) {
                return http
                    .get(url + 'Files', {
                        where: {
                            "source": sourceId
                        }
                    })
                    .then(function (res) {
                        return res.results;
                    });
            }

            //////////////////////////////////////////////

            function getOffers() {
                return http
                    .get(url + 'Offers')
                    .then(function (res) {
                        return res.results;
                    });
            }

            function deleteOffer(offer) {
                return http
                    .delete(url + 'Offers/' + offer.objectId)
                    .then(function (res) {
                        return res.results;
                    });
            }

        }])
}());

(function () {
    angular
        .module('app')
        .service('user', ['$q', 'toastr', function ($q, toastr) {
            var vm = this;

            vm.login = login;
            vm.signout = signout;

            /**
             * [login description]
             * @param  {[Object]} data [description]
             * @param  {[string]} data.email [user email]
             * @param  {[string]} data.password [user password]
             * @return {[null]}
             */
            function login(data) {

                return $q.defer(function (resolve, reject) {
                    resolve(true);
                });
            }

            /**
             * [signout description]
             * @return {[boolean]} [signout is success]
             */
            function signout() {

            }


        }])
}());
